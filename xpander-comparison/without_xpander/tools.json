[
  {
    "type": "function",
    "function": {
      "name": "crunchbase__crunchbase_autocomplete",
      "description": "Searches for organizations matching the query string using the Crunchbase Autocomplete API.",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The search query string to find organizations."
          }
        },
        "required": [
          "query"
        ],
        "additionalProperties": false
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "crunchbase__get_crunchbase_organization",
      "description": "Retrieves detailed information about a specific organization using the Crunchbase API.",
      "parameters": {
        "type": "object",
        "properties": {
          "organization_identifier": {
            "type": "string",
            "description": "The unique identifier for the organization (e.g., 'amazon')."
          }
        },
        "required": [
          "organization_identifier"
        ],
        "additionalProperties": false
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "linkedin__search_people_linkedin",
      "description": "Searches for people on LinkedIn based on various criteria.",
      "parameters": {
        "type": "object",
        "properties": {
          "keywords": {
            "type": "string",
            "description": "Keywords to search for (e.g., 'software engineer')."
          },
          "start": {
            "type": "integer",
            "description": "Pagination start point (e.g., 0, 10, 20).",
            "default": 0
          },
          "geo": {
            "type": "string",
            "description": "Geographical location IDs separated by commas (e.g., '103644278,101165590')."
          },
          "schoolId": {
            "type": "string",
            "description": "Identifier for the school."
          },
          "firstName": {
            "type": "string",
            "description": "First name of the person."
          },
          "lastName": {
            "type": "string",
            "description": "Last name of the person."
          },
          "keywordSchool": {
            "type": "string",
            "description": "Keywords related to the school."
          },
          "keywordTitle": {
            "type": "string",
            "description": "Keywords related to the job title."
          },
          "company": {
            "type": "string",
            "description": "Company name."
          }
        },
        "additionalProperties": false
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "linkedin__search_employees_linkedin",
      "description": "Searches for employees of a specific company on LinkedIn based on various criteria.",
      "parameters": {
        "type": "object",
        "properties": {
          "companyId": {
            "type": "string",
            "description": "The unique identifier for the company (e.g., '1441')."
          },
          "start": {
            "type": "integer",
            "description": "Pagination start point (e.g., 0, 50, 100).",
            "default": 0
          },
          "geoIds": {
            "type": "string",
            "description": "Geographical location IDs separated by commas (e.g., '90009735,103035651')."
          },
          "seniorityLevels": {
            "type": "string",
            "description": "Seniority levels separated by commas (e.g., 'manager,senior')."
          },
          "currentTitles": {
            "type": "string",
            "description": "Current job titles separated by commas (e.g., 'Engineer,Developer')."
          }
        },
        "required": [
          "companyId"
        ],
        "additionalProperties": false
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "linkedin__get_company_by_domain_linkedin",
      "description": "Retrieves detailed information about a company using its domain name via the LinkedIn Data API.",
      "parameters": {
        "type": "object",
        "properties": {
          "domain": {
            "type": "string",
            "description": "The domain name of the company (e.g., 'apple.com')."
          }
        },
        "required": [
          "domain"
        ],
        "additionalProperties": false
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "linkedin__get_company_posts_linkedin",
      "description": "Retrieves posts made by a specific company on LinkedIn.",
      "parameters": {
        "type": "object",
        "properties": {
          "username": {
            "type": "string",
            "description": "The LinkedIn username of the company (e.g., 'microsoft')."
          },
          "start": {
            "type": "integer",
            "description": "Pagination start point (e.g., 0, 50, 100).",
            "default": 0
          },
          "paginationToken": {
            "type": "string",
            "description": "Token for fetching the next page of results."
          }
        },
        "required": [
          "username"
        ],
        "additionalProperties": false
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "notion__notion_search",
      "description": ".Search by title",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The text that the API compares page and database titles against."
          },
          "sort": {
            "type": "object",
            "description": "A set of criteria, `direction` and `timestamp` keys, that orders the results. The **only** supported timestamp value is `\"last_edited_time\"`. Supported `direction` values are `\"ascending\"` and `\"descending\"`. If `sort` is not provided, then the most recently edited results are returned first.",
            "properties": {
              "direction": {
                "type": "string",
                "description": "The direction to sort. Possible values include `ascending` and `descending`."
              },
              "timestamp": {
                "type": "string",
                "description": "The name of the timestamp to sort against. Possible values include `last_edited_time`."
              }
            }
          },
          "filter": {
            "type": "object",
            "description": "A set of criteria, `value` and `property` keys, that limits the results to either only pages or only databases. Possible `value` values are `\"page\"` or `\"database\"`. The only supported `property` value is `\"object\"`.",
            "properties": {
              "value": {
                "type": "string",
                "description": "The value of the property to filter the results by.  Possible values for object type include `page` or `database`.  **Limitation**: Currently the only filter allowed is `object` which will filter by type of object (either `page` or `database`)"
              },
              "property": {
                "type": "string",
                "description": "The name of the property to filter by. Currently the only property you can filter by is the object type.  Possible values include `object`.   Limitation: Currently the only filter allowed is `object` which will filter by type of object (either `page` or `database`)"
              }
            }
          },
          "start_cursor": {
            "type": "string",
            "description": "A `cursor` value returned in a previous response that If supplied, limits the response to results starting after the `cursor`. If not supplied, then the first page of results is returned. Refer to [pagination](https://developers.notion.com/reference/intro#pagination) for more details."
          },
          "page_size": {
            "type": "integer",
            "description": "The number of items from the full list to include in the response. Maximum: `100`.",
            "default": 100,
            "format": "int32"
          }
        },
        "required": []
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "notion__query_notion_database",
      "description": ".Query a database",
      "parameters": {
        "type": "object",
        "properties": {
          "database_id": {
            "type": "string",
            "description": "Identifier for a Notion database.",
            "schema": {
              "type": "string"
            }
          },
          "filter_properties": {
            "type": "string",
            "description": "A list of page property value IDs associated with the database. Use this param to limit the response to a specific page property value or values for pages that meet the `filter` criteria.",
            "schema": {
              "type": "string"
            }
          },
          "filter": {
            "type": "string",
            "description": "When supplied, limits which pages are returned based on the [filter conditions](ref:post-database-query-filter).",
            "format": "json"
          },
          "sorts": {
            "type": "array",
            "description": "When supplied, orders the results based on the provided [sort criteria](ref:post-database-query-sort).",
            "items": {
              "type": "string"
            }
          },
          "start_cursor": {
            "type": "string",
            "description": "When supplied, returns a page of results starting after the cursor provided. If not supplied, this endpoint will return the first page of results."
          },
          "page_size": {
            "type": "integer",
            "description": "The number of items from the full list desired in the response. Maximum: 100",
            "default": 100,
            "format": "int32"
          }
        },
        "required": [
          "database_id"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "notion__create_notion_page",
      "description": ".Create a page",
      "parameters": {
        "type": "object",
        "properties": {
          "parent": {
            "type": "string",
            "description": "The parent page or database where the new page is inserted, represented as a JSON object with a `page_id` or `database_id` key, and the corresponding ID.",
            "format": "json"
          },
          "properties": {
            "type": "string",
            "description": "The values of the page\u2019s properties. If the `parent` is a database, then the schema must match the parent database\u2019s properties. If the `parent` is a page, then the only valid object key is `title`.",
            "format": "json"
          },
          "children": {
            "type": "array",
            "description": "The content to be rendered on the new page, represented as an array of [block objects](https://developers.notion.com/reference/block).",
            "items": {
              "type": "string"
            }
          },
          "icon": {
            "type": "string",
            "description": "The icon of the new page. Either an [emoji object](https://developers.notion.com/reference/emoji-object) or an [external file object](https://developers.notion.com/reference/file-object)..",
            "format": "json"
          },
          "cover": {
            "type": "string",
            "description": "The cover image of the new page, represented as a [file object](https://developers.notion.com/reference/file-object).",
            "format": "json"
          }
        },
        "required": [
          "properties",
          "parent"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "notion__append_block_children",
      "description": ".Append block children",
      "parameters": {
        "type": "object",
        "properties": {
          "block_id": {
            "type": "string",
            "description": "Identifier for a [block](ref:block). Also accepts a [page](ref:page) ID.",
            "schema": {
              "type": "string"
            }
          },
          "children": {
            "type": "array",
            "description": "Child content to append to a container block as an array of [block objects](ref:block)",
            "items": {
              "type": "object"
            }
          },
          "after": {
            "type": "string",
            "description": "The ID of the existing block that the new block should be appended after."
          }
        },
        "required": [
          "block_id",
          "children"
        ]
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "perplexity__perplexity_chat_completion",
      "description": "Sends a chat completion request to the Perplexity API for advanced text generation and analysis.",
      "parameters": {
        "type": "object",
        "properties": {
          "model": {
            "type": "string",
            "description": "The name of the model to use."
          },
          "messages": {
            "type": "array",
            "description": "A list of message dictionaries with 'role' and 'content'.",
            "items": {
              "type": "object",
              "properties": {
                "role": {
                  "type": "string",
                  "enum": [
                    "system",
                    "user",
                    "assistant"
                  ]
                },
                "content": {
                  "type": "string"
                }
              },
              "required": [
                "role",
                "content"
              ]
            }
          },
          "max_tokens": {
            "type": "integer",
            "description": "The maximum number of tokens to generate."
          },
          "temperature": {
            "type": "number",
            "description": "Sampling temperature.",
            "default": 0.2
          },
          "top_p": {
            "type": "number",
            "description": "Nucleus sampling threshold.",
            "default": 0.9
          },
          "return_citations": {
            "type": "boolean",
            "description": "Whether to return citations.",
            "default": false
          },
          "search_domain_filter": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "Domains to filter search results."
          },
          "return_images": {
            "type": "boolean",
            "description": "Whether to return images.",
            "default": false
          },
          "return_related_questions": {
            "type": "boolean",
            "description": "Whether to return related questions.",
            "default": false
          },
          "search_recency_filter": {
            "type": "string",
            "description": "Time interval for search results.",
            "enum": [
              "month",
              "week",
              "day",
              "hour"
            ]
          },
          "top_k": {
            "type": "integer",
            "description": "Number of tokens for top-k filtering.",
            "default": 0
          },
          "stream": {
            "type": "boolean",
            "description": "Whether to stream the response.",
            "default": false
          },
          "presence_penalty": {
            "type": "number",
            "description": "Penalty for new tokens based on their presence in the text so far.",
            "default": 0
          },
          "frequency_penalty": {
            "type": "number",
            "description": "Penalty for new tokens based on their frequency in the text so far.",
            "default": 1
          }
        },
        "required": [
          "model",
          "messages"
        ],
        "additionalProperties": false
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "x__search_people_twitter",
      "description": "Retrieves media associated with a specific Twitter user.",
      "parameters": {
        "type": "object",
        "properties": {
          "screenname": {
            "type": "string",
            "description": "The Twitter handle of the user (e.g., 'elonmusk')."
          },
          "rest_id": {
            "type": "string",
            "description": "Overrides the screenname if provided."
          }
        },
        "required": [
          "screenname"
        ],
        "additionalProperties": false
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "x__list_timeline_twitter",
      "description": "Retrieves the timeline of a specific Twitter list.",
      "parameters": {
        "type": "object",
        "properties": {
          "list_id": {
            "type": "string",
            "description": "The unique identifier for the Twitter list."
          },
          "cursor": {
            "type": "string",
            "description": "Pagination cursor to fetch the next set of results."
          }
        },
        "required": [
          "list_id"
        ],
        "additionalProperties": false
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "x__search_twitter",
      "description": "Performs a search on Twitter based on the provided query.",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The search query string (e.g., 'cybertruck')."
          },
          "cursor": {
            "type": "string",
            "description": "Pagination cursor to fetch the next set of results."
          },
          "search_type": {
            "type": "string",
            "description": "Type of search. Available options depend on the API documentation."
          }
        },
        "required": [
          "query"
        ],
        "additionalProperties": false
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "x__get_timeline_twitter",
      "description": "Retrieves the timeline of a specific Twitter user.",
      "parameters": {
        "type": "object",
        "properties": {
          "screenname": {
            "type": "string",
            "description": "The Twitter handle of the user (e.g., 'elonmusk')."
          },
          "rest_id": {
            "type": "string",
            "description": "Overrides the screenname if provided."
          },
          "cursor": {
            "type": "string",
            "description": "Pagination cursor to fetch the next set of results."
          }
        },
        "required": [
          "screenname"
        ],
        "additionalProperties": false
      }
    }
  },
  {
    "type": "function",
    "function": {
      "name": "tavily__search",
      "description": "Performs a web search using the Tavily API and returns relevant results with optional AI-generated answers.",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The search query string."
          },
          "max_results": {
            "type": "integer",
            "description": "Maximum number of search results to return. Default is 5."
          },
          "include_answer": {
            "type": "boolean",
            "description": "Include an AI-generated answer to the query. Default is true."
          },
          "include_images": {
            "type": "boolean",
            "description": "Include query-related images in the response. Default is false."
          }
        },
        "required": [
          "query"
        ],
        "additionalProperties": false
      }
    }
  }
]